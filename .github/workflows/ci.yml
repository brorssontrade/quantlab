name: CI

on:
  push:
    branches: [ main ]
  schedule:
    - cron: "0 1 * * *"   # nattligt jobb (UTC)
  workflow_dispatch:

permissions:
  contents: write   # krävs för att pusha till gh-pages


- name: Signals for watchlist
  shell: pwsh
  run: |
    $cfg = (Get-Content config/watchlist.yml -Raw | ConvertFrom-Yaml)
    foreach ($t in $cfg.tickers) {
      python -m scripts.signals_example --symbol $t --days 120
    }

- name: Backtest for watchlist
  shell: pwsh
  run: |
    $cfg = (Get-Content config/watchlist.yml -Raw | ConvertFrom-Yaml)
    foreach ($t in $cfg.tickers) {
      python -m scripts.backtest_min --symbol $t --days 180
    }





jobs:
  build:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Installera beroenden
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt yfinance matplotlib

      - name: Förbered mappar
        shell: pwsh
        run: |
          mkdir storage\parquet\raw_1h -ea 0
          mkdir db -ea 0
          mkdir reports -ea 0

  - name: Hämta & resampla (watchlist)
  shell: pwsh
  run: |
    python .\scripts\ingest_minute_to_hour.py --days 60

      - name: Initiera DuckDB
        run: python .\scripts\init_duckdb.py

      - name: Plotta alla tickers
        shell: pwsh
        run: |
          $cfg = ConvertFrom-Yaml (Get-Content config\watchlist.yml -Raw)
          foreach ($t in $cfg.tickers) {
            python .\scripts\plot_symbol.py --symbol $t --days 60
          }

      - name: Ladda upp grafer som artifact
        uses: actions/upload-artifact@v4
        with:
          name: reports
          path: reports/*.png
          retention-days: 7

      # --- NYTT: bygg statisk sida + publicera till gh-pages ---
      - name: Bygg statisk sida (pages/)
        shell: pwsh
        run: |
          Remove-Item -Recurse -Force pages -ErrorAction SilentlyContinue
          mkdir pages
          Copy-Item reports\*.png pages\ -ErrorAction SilentlyContinue
          $h = @"
          <html><head><meta charset='utf-8'>
          <title>Quantlab charts</title>
          <style>
            body{font-family:system-ui,Segoe UI,Roboto,Helvetica,Arial,sans-serif;max-width:1200px;margin:40px auto;padding:0 20px}
            h1{margin-bottom:8px}
            img{max-width:100%;height:auto}
          </style>
          </head><body><h1>Quantlab charts</h1>
          "@
          Get-ChildItem pages -Filter *.png | Sort-Object Name | ForEach-Object {
            $n = $_.Name
            $h += "<h3>$n</h3><img src='$n'><hr/>"
          }
          $h += "</body></html>"
          $h | Out-File pages\index.html -Encoding utf8
          New-Item -ItemType File -Path pages\.nojekyll -Force | Out-Null

      - name: Publicera till GitHub Pages (gh-pages)
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: pages
          publish_branch: gh-pages
          force_orphan: true
          commit_message: "Deploy charts: ${{ github.sha }}"
- name: Build static page
  shell: pwsh
  run: |
    mkdir pages 2>$null
    Copy-Item reports\*.png pages\ -ErrorAction SilentlyContinue
    Copy-Item reports\*.csv pages\ -ErrorAction SilentlyContinue
    Copy-Item reports\*_metrics.json pages\ -ErrorAction SilentlyContinue

    $h = @"
    <html><head><meta charset='utf-8'><title>Quantlab charts</title>
    <style>
      body{font-family:Arial,Helvetica,sans-serif;max-width:1280px;margin:20px auto;padding:0 12px}
      table{border-collapse:collapse;width:100%;margin:16px 0}
      th,td{border:1px solid #ddd;padding:8px;text-align:right}
      th{text-align:center;background:#f3f3f3}
      td.symbol{font-weight:bold;text-align:left}
      img{max-width:1200px}
      .muted{color:#666;font-size:12px}
    </style>
    </head><body>
    <h1>Quantlab charts</h1>
    <p class="muted">Senast genererad: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss") UTC</p>
"@

    # KPI-tabell från *_metrics.json om de finns
    $metrics = Get-ChildItem pages -Filter *_metrics.json -ErrorAction SilentlyContinue
    if ($metrics) {
      $h += "<h2>KPI (senaste backtest)</h2>"
      $h += "<table><thead><tr><th>Ticker</th><th>CAGR</th><th>Sharpe</th><th>MaxDD</th><th>HitRate</th><th>Trades</th></tr></thead><tbody>"
      foreach ($m in $metrics) {
        try {
          $j = Get-Content $m.FullName -Raw | ConvertFrom-Json
          $ticker = ($m.BaseName -replace '_metrics$','')
          $cagr   = "{0:P2}" -f [double]$j.CAGR
          $sharpe = "{0:N2}" -f [double]$j.Sharpe
          $maxdd  = "{0:P1}" -f [double]$j.MaxDD
          $hit    = "{0:P1}" -f [double]$j.HitRate
          $tr     = [int]$j.Trades
          $h += "<tr><td class='symbol'>$ticker</td><td>$cagr</td><td>$sharpe</td><td>$maxdd</td><td>$hit</td><td>$tr</td></tr>"
        } catch {
          # hoppa över trasig json
        }
      }
      $h += "</tbody></table>"
    }

    # Lista CSV (signals/backtests)
    if (Test-Path pages\*.csv) {
      $h += "<h2>Signals & Backtests (CSV)</h2><ul>"
      Get-ChildItem pages -Filter *.csv | ForEach-Object {
        $h += "<li><a href='$($_.Name)'>$($_.Name)</a></li>"
      }
      $h += "</ul>"
    }

    # Visa alla PNG-grafer
    Get-ChildItem pages -Filter *.png | ForEach-Object {
      $n = $_.Name
      $h += "<h3>$n</h3><img src='$n'><hr/>"
    }

    $h += "</body></html>"
    $h | Out-File pages\index.html -Encoding utf8


- name: Publish to GitHub Pages
  uses: peaceiris/actions-gh-pages@v4
  with:
    github_token: ${{ secrets.GITHUB_TOKEN }}
    publish_dir: pages
    publish_branch: gh-pages
    force_orphan: true


